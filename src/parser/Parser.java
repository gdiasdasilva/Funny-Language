/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import ast.*;
import java.util.List;
import java.util.ArrayList;

public class Parser implements ParserConstants {

  static final public ASTNode Prog() throws ParseException {
  ASTNode p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
    case BOOL_LIT:
    case LPAR:
    case LBRACE:
    case MINUS:
    case IF_TOK:
    case NOT:
    case DECL:
    case NEW:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case DEREF:
    case STRING_DEL:
    case FUN:
    case STRING:
      p = SExp();
      jj_consume_token(EL);
                            {if (true) return p;}
      break;
    case 0:
      jj_consume_token(0);
                                                    System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SExp() throws ParseException {
  ASTNode e1, e2;
    e1 = LAss();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      e2 = LAss();
                                             e1 = new ASTSeq(e1, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LAss() throws ParseException {
  ASTNode e1, e2;
    e1 = LExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      e2 = LExp();
                                          e1 = new ASTAssign(e1, e2);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LExp() throws ParseException {
  ASTNode lt1, lt2;
    lt1 = LTerm();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      lt2 = LTerm();
                                          lt1 = new ASTOr(lt1, lt2);
    }
    {if (true) return lt1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LTerm() throws ParseException {
  ASTNode e1, e2; Token op;
    e1 = LFact();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      op = jj_consume_token(AND);
      e2 = LFact();
                                                        e1 = new ASTAnd(e1, e2);
    }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LFact() throws ParseException {
  ASTNode f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
    case BOOL_LIT:
    case LPAR:
    case LBRACE:
    case MINUS:
    case IF_TOK:
    case DECL:
    case NEW:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case DEREF:
    case STRING_DEL:
    case FUN:
    case STRING:
      f = LCmp();
      break;
    case NOT:
      jj_consume_token(NOT);
      f = LFact();
                                          f = new ASTNot(f);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode LCmp() throws ParseException {
  ASTNode e1, e2; Token op;
    e1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GR:
    case GREQ:
    case LS:
    case LSEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        op = jj_consume_token(EQ);
        break;
      case GREQ:
        op = jj_consume_token(GREQ);
        break;
      case LSEQ:
        op = jj_consume_token(LSEQ);
        break;
      case GR:
        op = jj_consume_token(GR);
        break;
      case LS:
        op = jj_consume_token(LS);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = Exp();
                  switch (op.kind) {
                        case EQ: e1 = new ASTEq(e1, e2); break;
                        case GREQ: e1 = new ASTGreq(e1, e2); break;
                        case LSEQ: e1 = new ASTLseq(e1, e2); break;
                        case GR: e1 = new ASTGr(e1, e2); break;
                        default: e1 = new ASTLs(e1, e2); break;
                  }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD_OP:
      case MINUS:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD_OP:
        op = jj_consume_token(ADD_OP);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
                switch (op.kind)
                {
                          case ADD_OP: t1 = new ASTPlus(t1, t2); break;
                          default: t1 = new ASTSub(t1, t2); break;
                    }
    }
            {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {
  Token op;
  ASTNode f1, f2;
    f1 = Factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL_OP:
      case DIV_OP:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL_OP:
        op = jj_consume_token(MUL_OP);
        break;
      case DIV_OP:
        op = jj_consume_token(DIV_OP);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f2 = Factor();
                  switch (op.kind)
                  {
                    case MUL_OP: f1 = new ASTMul(f1, f2); break;
                    default: f1 = new ASTDiv(f1, f2); break;
                  }
    }
          {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Factor() throws ParseException {
  ASTNode f, te, ef; List<ASTNode> args; Token field;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECL:
      f = Decl();
      break;
    case Num:
    case BOOL_LIT:
    case LPAR:
    case STRING_DEL:
    case STRING:
      f = SFact();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case QUEST:
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUEST:
          jj_consume_token(QUEST);
          te = SExp();
          jj_consume_token(COLON);
          ef = Factor();
                                                       f = new ASTCond(f, te, ef);
          break;
        case LPAR:
          args = Args();
                      f = new ASTCall(f, args);
          break;
        case DOT:
          jj_consume_token(DOT);
          field = jj_consume_token(STRING);
                                                                                   f = new ASTField(f, field.image);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case MINUS:
      jj_consume_token(MINUS);
      f = Factor();
                             f = new ASTUnMinus(f);
      break;
    case LBRACE:
      f = Record();
      break;
    case NEW:
      jj_consume_token(NEW);
      f = Factor();
                               f = new ASTNew(f);
      break;
    case DEREF:
      jj_consume_token(DEREF);
      f = Factor();
                                 f = new ASTDeref(f);
      break;
    case IF_TOK:
      jj_consume_token(IF_TOK);
                     ef = null;
      f = SExp();
      jj_consume_token(THEN_TOK);
      te = SExp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE_TOK:
        jj_consume_token(ELSE_TOK);
        ef = SExp();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(END);
                                                                                                            f = new ASTIf(f, te, ef);
      break;
    case WHILE:
      f = While();
      break;
    case FUN:
      f = FunctionDef();
      break;
    case PRINT:
    case PRINTLN:
      f = Print();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Record() throws ParseException {
  List<ASTNode> el; List<String> fl; ASTNode e; Token f;
    jj_consume_token(LBRACE);
    f = jj_consume_token(STRING);
    jj_consume_token(ASSOC);
    e = Factor();
      el = new ArrayList<ASTNode>(); fl = new ArrayList<String>(); fl.add(f.image); el.add(e);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      f = jj_consume_token(STRING);
      jj_consume_token(ASSOC);
      e = Factor();
                                                         fl.add(f.image); el.add(e);
    }
    jj_consume_token(RBRACE);
    {if (true) return new ASTRecord(el, fl);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SFact() throws ParseException {
  Token n; ASTNode sf;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL_LIT:
      n = jj_consume_token(BOOL_LIT);
                             sf = new ASTBool(Boolean.parseBoolean(n.image));
      break;
    case Num:
      n = jj_consume_token(Num);
                        sf = new ASTNum(Integer.parseInt(n.image));
      break;
    case STRING:
      n = jj_consume_token(STRING);
                           sf = new ASTId(n.image);
      break;
    case STRING_DEL:
      jj_consume_token(STRING_DEL);
      n = jj_consume_token(STRING);
      jj_consume_token(STRING_DEL);
                                                     sf = new ASTString(n.image);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      sf = SExp();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return sf;}
    throw new Error("Missing return statement in function");
  }

  static final public List<ASTNode> Args() throws ParseException {
  ASTNode a; List<ASTNode> args;
    jj_consume_token(LPAR);
               args = new ArrayList<ASTNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
    case BOOL_LIT:
    case LPAR:
    case LBRACE:
    case MINUS:
    case IF_TOK:
    case NOT:
    case DECL:
    case NEW:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case DEREF:
    case STRING_DEL:
    case FUN:
    case STRING:
      a = SExp();
                                                               args.add(a);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        a = SExp();
                                                                                                    args.add(a);
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Decl() throws ParseException {
  ASTNode e;
  Token n;
  List<String> ids;
  List<ASTNode> defs;
    jj_consume_token(DECL);
                    ids = new ArrayList<String>(); defs = new ArrayList<ASTNode>();
    label_8:
    while (true) {
      n = jj_consume_token(STRING);
      jj_consume_token(ASSOC);
      e = SExp();
                                                 ids.add(n.image); defs.add(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(IN);
    e = SExp();
    jj_consume_token(END);
    {if (true) return new ASTDecl(ids, defs, e);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode FunctionDef() throws ParseException {
  ASTNode be; /* expression defining the function body */
  TypeTag typeTag;
  List<String> paramNamesl; /* list of parameters names */
  List<TypeTag> paramTypesl; /* list of parameters TypeTags */
  Token param;
    jj_consume_token(FUN);
              paramNamesl = new ArrayList<String>(); paramTypesl = new ArrayList<TypeTag>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      param = jj_consume_token(STRING);
      jj_consume_token(COLON);
      typeTag = Ty();
      paramNamesl.add(param.image);
      paramTypesl.add(typeTag);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        param = jj_consume_token(STRING);
        jj_consume_token(COLON);
        typeTag = Ty();
      paramNamesl.add(param.image);
      paramTypesl.add(typeTag);
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(ARROW);
    be = SExp();
    jj_consume_token(END);
    {if (true) return new ASTFun(paramNamesl, paramTypesl, be);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode While() throws ParseException {
  ASTNode c, b;
    jj_consume_token(WHILE);
    c = SExp();
    jj_consume_token(DO);
    b = SExp();
                                             b = new ASTWhile(c, b);
    jj_consume_token(END);
                                                                                   {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Print() throws ParseException {
  Token op; ASTNode e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
      op = jj_consume_token(PRINT);
      break;
    case PRINTLN:
      op = jj_consume_token(PRINTLN);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    e = Factor();
            if (op.kind == PRINT)
                  e = new ASTPrint(e);
                else
              e = new ASTPrintln(e);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeTag Ty() throws ParseException {
  TypeTag tt; List<TypeTag> ttl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TYPE:
      jj_consume_token(INT_TYPE);
                          tt = TypeTag.getIntTypeTag();
      break;
    case BOOL_TYPE:
      jj_consume_token(BOOL_TYPE);
                           tt = TypeTag.getBooleanTypeTag();
      break;
    case CMD_TYPE:
      jj_consume_token(CMD_TYPE);
                          tt = TypeTag.getCommandTypeTag();
      break;
    case REF_TYPE:
      jj_consume_token(REF_TYPE);
      tt = Ty();
                                    tt = new TypeTag.RefTypeTag(tt);
      break;
    case LPAR:
      jj_consume_token(LPAR);
                      ttl = new ArrayList<TypeTag>();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REF_TYPE:
      case INT_TYPE:
      case BOOL_TYPE:
      case CMD_TYPE:
      case LPAR:
        tt = Ty();
                                                                    ttl.add(tt);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          tt = Ty();
                                                                                                        ttl.add(tt);
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(ARROW);
      tt = Ty();
                                                                                                                                                   tt = new TypeTag.FunTypeTag(ttl, tt);
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return tt;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40112861,0x0,0x0,0x20000000,0x10000000,0x40112860,0x7880000,0x7880000,0x18000,0x18000,0x60000,0x60000,0x80000800,0x80000800,0x400000,0x112860,0x0,0x860,0x0,0x40112860,0x0,0x0,0x0,0x0,0x0,0xf80,0xf80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x9ba88,0x2,0x100,0x0,0x0,0x9ba88,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x9ba88,0x40000,0x88000,0x40000,0x9ba88,0x80000,0x40000,0x80000,0x1800,0x40000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

PARSER_BEGIN(Parser)

package parser;

import ast.*;
import java.util.List;
import java.util.ArrayList;
import semantics.*;

public class Parser
{

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
< Num: (["0"-"9"]) + >
| < BOOL_LIT: "true" | "false" >
| < REF_TYPE: "ref" >
| < INT_TYPE: "int" >
| < BOOL_TYPE: "bool" >
| < LPAR : "(" >
| < RPAR : ")" >
| < ADD_OP : "+" >
| < MINUS : "-" >
| < MUL_OP : "*" >
| < DIV_OP : "/" >
| < EQ : "==" >
| < IF_TOK : "if" >
| < THEN_TOK: "then" >
| < ELSE_TOK : "else" >
| < GR: ">" >
| < GREQ : ">=" >
| < LS: "<" >
| < LSEQ : "<=" >
| < NEQ : "!=" >
| < AND : "&&" >
| < OR : "||" >
| < NOT: "~" >
| < QUEST: "?" >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < EL: ";;" >
| < DECL: "decl" >
| < ASSOC: "=" >
| < IN: "in" >
| < END: "end" >
| < NEW: "new" >
| < ASSIGN: ":=" >
| < WHILE: "while" >
| < DO: "do" >
| < PRINT: "print" >
| < PRINTLN: "println" >
| < DEREF: "!" >
| < STRING_DEL: "\"" >
| < FUN: "fun" >
| < ARROW: "=>" >
| < COMMA: "," >
| < STRING: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

ASTNode Prog():
{ ASTNode p; }
{
  	p = SExp() < EL > { return p; } | < EOF > { System.exit(0); }
}

ASTNode SExp():
{ ASTNode e1, e2; }
{
  e1 = LAss() (< SEMICOLON > e2 = LAss() { e1 = new ASTSeq(e1, e2); })*
  { return e1; }
}

ASTNode LAss():
{ ASTNode e1, e2; }
{
  e1 = LExp() (< ASSIGN > e2 = LExp() { e1 = new ASTAssign(e1, e2); })?
  { return e1; }
}

ASTNode LExp():
{ ASTNode lt1, lt2; }
{
  lt1 = LTerm() (< OR > lt2 = LTerm() { lt1 = new ASTOr(lt1, lt2); } )*
  { return lt1; }
}

ASTNode LTerm():
{ ASTNode e1, e2; Token op; }
{
	e1 = LFact() ( (op = < AND > ) e2 = LFact() { e1 = new ASTAnd(e1, e2); } )*
	{ return e1; }
}

ASTNode LFact():
{ ASTNode f; }
{
  (f = LCmp()) | (< NOT > f = LFact() { f = new ASTNot(f); })
  { return f; }
}

ASTNode LCmp():
{ ASTNode e1, e2; Token op; }
{
	e1 = Exp() ( (op = < EQ > | op = < GREQ > | op = < LSEQ > | op = < GR > | op = < LS >) e2 = Exp()
	{
	  switch (op.kind) {	  	case EQ: e1 = new ASTEq(e1, e2); break;
	  	case GREQ: e1 = new ASTGreq(e1, e2); break;
	  	case LSEQ: e1 = new ASTLseq(e1, e2); break;
	  	case GR: e1 = new ASTGr(e1, e2); break;
	  	default: e1 = new ASTLs(e1, e2); break;	  }
	}
	)?
	{ return e1; }
}

ASTNode Exp():
{ Token op;
  ASTNode t1, t2; }
{
      t1 = Term() ( ( op=<ADD_OP> | op=<MINUS> ) t2 = Term() 
	  {
        switch (op.kind) {
	  	  case ADD_OP: t1 = new ASTEq(t1, t2); break;
	  	  default: t1 = new ASTSub(t1, t2); break;
	    }
      }
      )*
	  { return t1; }
}

ASTNode Term():
{ Token op;
  ASTNode f1, f2; }
{
    f1 = Factor() ( (op = <MUL_OP> | op = < DIV_OP >) f2 = Factor()
 	{
 	  switch (op.kind) {
	    case MUL_OP: f1 = new ASTEq(f1, f2); break;
	    default: f1 = new ASTSub(f1, f2); break;
	  }
 	}
 	)*
 	{ return f1; }
}

ASTNode Factor():
{ ASTNode f, te, ef; List<ASTNode> args; }
{
  (
    f = Decl() |
    f = SFact() (
      (< QUEST > te = SExp() < COLON > ef = Factor() { f = new ASTCond(f, te, ef); }) |
      args = Args() { f = new ASTCall(f, args); }
    )? |
    < MINUS > f = Factor() { f = new ASTUnMinus(f); } |
	< NEW > f = Factor() { f = new ASTNew(f); } |
	< DEREF > f = Factor() { f = new ASTDeref(f); } |
    f = While() |
    f = FunctionDef() |
	f = Print()
  )
  { return f; }
}

ASTNode SFact():
{ Token n; ASTNode sf; }
{
  n = < BOOL_LIT > { sf = new ASTBool(Boolean.parseBoolean(n.image)); } |
  n = < Num > { sf = new ASTNum(Integer.parseInt(n.image)); } |
  n = < STRING > { sf = new ASTId(n.image); } |
  <LPAR> ( sf = SExp() ) <RPAR>
  { return sf; }}

List<ASTNode> Args():
{ ASTNode a; List<ASTNode> args; }
{
  ( < LPAR > { args = new ArrayList<ASTNode>(); } a=SExp() { args.add(a); } (< COMMA > a=SExp() { args.add(a); } )* < RPAR > )
  { return args; }}

ASTNode Decl():
{
  ASTNode e;
  Token n;
  List<String> ids;
  List<ASTNode> defs;
}
{
  < DECL > { ids = new ArrayList<String>(); defs = new ArrayList<ASTNode>(); }
    ( n = < STRING > < ASSOC > e = SExp() { ids.add(n.image); defs.add(e); } )+
  < IN > e = SExp()
  < END >
  { return new ASTDecl(ids, defs, e); }
}

ASTNode FunctionDef():
{
  ASTNode be; /* expression defining the function body */
  List<String> paramsl; /* list of parameter names */
  List<IType> typesl; /* list of param types */
  Token param, type;
}
{
  ( < FUN > { paramsl = new ArrayList<String>(); typesl = new ArrayList<IType>(); }
    (param = < STRING >
    < COLON > ( type = < REF_TYPE > | type = < INT_TYPE > | type = < BOOL_TYPE > )
    { paramsl.add(param.image);
		switch (type.kind) {
		  case REF_TYPE: typesl.add(new RefType()); break;
		  case INT_TYPE: typesl.add(new IntType()); break;
		  default: typesl.add(new BoolType()); break;
        }
    }
    (
      ( < COMMA > param = < STRING > < COLON >
    ( type = < REF_TYPE > | type = < INT_TYPE > | type = < BOOL_TYPE > ) )
    { paramsl.add(param.image);
      switch (type.kind) {
		  case REF_TYPE: typesl.add(new RefType()); break;
		  case INT_TYPE: typesl.add(new IntType()); break;
		  default: typesl.add(new BoolType()); break;
        }
    }    )*
  )? < ARROW > be = SExp()
  < END > )
  { return new ASTFun(paramsl, typesl, be); }
}

ASTNode While():
{ ASTNode c, b; }
{
  ( < WHILE > c = SExp() < DO > b = SExp() { b = new ASTWhile(c, b); } < END > ) { return b; }
}

ASTNode Print():
{ Token op; ASTNode e; }
{
  ( op = < PRINT > | op = < PRINTLN > ) e = Factor()
  {
    if (op.kind == PRINT)
	  e = new ASTPrint(e);
	else
      e = new ASTPrintln(e);
  }
  { return e; }
}